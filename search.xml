<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>分析云二次开发——数据篇</title>
    <url>/2020/01/09/%E5%88%86%E6%9E%90%E4%BA%91%E4%BA%8C%E5%BC%80%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%AF%87/</url>
    <content><![CDATA[<h1 id="分析云二次开发——数据篇"><a href="#分析云二次开发——数据篇" class="headerlink" title="分析云二次开发——数据篇"></a>分析云二次开发——数据篇</h1><p>参照分析云本身调用接口方式，使用ajax或其他前端调用接口的技术，获取数据源，并进行数据处理，以适配要自定义的图表。</p>
<h2 id="1、解读源码"><a href="#1、解读源码" class="headerlink" title="1、解读源码"></a>1、解读源码</h2><p>以词云为例，在\BA.WebApp\js\views找到wordcloudview.js，使用任意IDE打开，找到如下代码:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">requestWebApiJson:<span class="function"><span class="keyword">function</span>(<span class="params">reportId,blockId,fn,fv</span>)</span>&#123;</span><br><span class="line">			    	 fn = <span class="built_in">window</span>.encodeURIComponent(fn);</span><br><span class="line">					 fv = <span class="built_in">window</span>.encodeURIComponent(fv);</span><br><span class="line">			    	 <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">			    	 <span class="keyword">var</span> model = <span class="keyword">new</span> BlockDataModel();</span><br><span class="line">      				 model.url =  getWebApiURI()+<span class="string">"/GetWordCloudJson/?reportId="</span>+reportId+<span class="string">"&amp;blockId="</span>+blockId+<span class="string">"&amp;token="</span>+<span class="keyword">this</span>.model.token+<span class="string">"&amp;filterItem="</span>+fn+<span class="string">"&amp;filterValue="</span>+fv;</span><br><span class="line">	 				 </span><br><span class="line">	 				  model.fetch(&#123;<span class="attr">data</span>: <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.model.currentReportFilter),<span class="attr">type</span>: <span class="string">'POST'</span>, <span class="attr">contentType</span>:<span class="string">"application/json"</span>, </span><br><span class="line">    							success: <span class="function"><span class="keyword">function</span> (<span class="params">model,response</span>) </span>&#123;</span><br><span class="line">    								<span class="keyword">if</span> (response.Message!=<span class="string">""</span>) &#123;</span><br><span class="line">    									 	$(<span class="string">"#"</span>+blockId+<span class="string">"_Msg"</span>).html(response.Message);						            </span><br><span class="line">											$(<span class="string">"#"</span>+blockId).show();</span><br><span class="line">			                        		$(<span class="string">"#"</span>+blockId+<span class="string">"_Msg"</span>).hide();</span><br><span class="line">    								&#125;</span><br><span class="line">    								<span class="keyword">else</span>&#123;</span><br><span class="line">											that.render(response.Items,response.LinkParameter1,response.LinkParameter2,response.LinkParameter3,response.LinkParameter4,response.LinkParameter5);</span><br><span class="line">											</span><br><span class="line">											$(<span class="string">"#"</span>+blockId).show();</span><br><span class="line">			                        		$(<span class="string">"#"</span>+blockId+<span class="string">"_Msg"</span>).hide();</span><br><span class="line">									&#125;</span><br><span class="line">    							&#125;,</span><br><span class="line">    							error: <span class="function"><span class="keyword">function</span> (<span class="params">collection, response, options</span>) </span>&#123;</span><br><span class="line">								   printError(blockId,response.responseText)</span><br><span class="line">								&#125;,</span><br><span class="line">								complete:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">									 that.eventBus.trigger(<span class="string">'hideloader'</span>);</span><br><span class="line">								&#125;</span><br><span class="line">    						&#125;);</span><br><span class="line">			   &#125;,</span><br></pre></td></tr></table></figure>

<p>可以看出调用接口需要如下内容：</p>
<ul>
<li><p>请求地址 url</p>
</li>
<li><p>基础地址</p>
<ul>
<li>接口地址 （不同图表地址不同）</li>
<li>参数 param （需要encodeURL）<ul>
<li>报表编号 reportId</li>
<li>块编号 blockId</li>
<li>token</li>
<li>过滤项 filterItem </li>
<li>过滤值 filterValue</li>
</ul>
</li>
</ul>
</li>
<li><p>请求类型 type</p>
<ul>
<li>POST</li>
</ul>
</li>
<li><p>请求头 headers</p>
<ul>
<li>“Content-type”:  “application/json”</li>
</ul>
</li>
<li><p>请求内容 data</p>
<ul>
<li>“data”: JSON.stringify({“Name”: reportId,”Items”:[]}) </li>
</ul>
</li>
</ul>
<h3 id="1-1-获取请求地址"><a href="#1-1-获取请求地址" class="headerlink" title="1.1 获取请求地址"></a>1.1 获取请求地址</h3><h4 id="1-1-1-基础地址"><a href="#1-1-1-基础地址" class="headerlink" title="1.1.1 基础地址"></a>1.1.1 基础地址</h4><p>基础地址即项目启动地址，本地默认为：<a href="http://localhost:8008" target="_blank" rel="noopener">http://localhost:8008</a></p>
<h4 id="1-1-2-接口地址"><a href="#1-1-2-接口地址" class="headerlink" title="1.1.2 接口地址"></a>1.1.2 接口地址</h4><p>在\BA.WebApp\js\views目录下找不同报表的js文件，从源代码中获取接口地址，例如词云的接口地址：/GetWordCloudJson</p>
<h4 id="1-1-3-报表编号"><a href="#1-1-3-报表编号" class="headerlink" title="1.1.3 报表编号"></a>1.1.3 报表编号</h4><p>在报表管理页面，找到对应报表，点击属性</p>
<p><img src="E:%5Cmd%E6%96%87%E6%A1%A3%5C%E5%88%86%E6%9E%90%E4%BA%91%E4%BA%8C%E5%BC%80%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%AF%87%5C%E8%8E%B7%E5%8F%96%E6%8A%A5%E8%A1%A8id.png" alt=""></p>
<h4 id="1-1-4-块编号"><a href="#1-1-4-块编号" class="headerlink" title="1.1.4 块编号"></a>1.1.4 块编号</h4><p>在\AnalyticsCloud\BIN目录下找到ReportTools.exe，双击运行以此找到对应的块</p>
<p><img src="E:%5Cmd%E6%96%87%E6%A1%A3%5C%E5%88%86%E6%9E%90%E4%BA%91%E4%BA%8C%E5%BC%80%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%AF%87%5C%E8%8E%B7%E5%8F%96%E5%9D%97id.png" alt=""></p>
<h4 id="1-1-5-token"><a href="#1-1-5-token" class="headerlink" title="1.1.5 token"></a>1.1.5 token</h4><p>在报表管理页面，点击地址栏</p>
<p><img src="E:%5Cmd%E6%96%87%E6%A1%A3%5C%E5%88%86%E6%9E%90%E4%BA%91%E4%BA%8C%E5%BC%80%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%AF%87%5Ctoken.png" alt=""></p>
<p>1.1.6 filterItem</p>
<p>目前没有涉及，默认空即可，如有使用后续更新</p>
<p>1.1.7 filterValue</p>
<p>目前没有涉及，默认空即可，如有使用后续更新</p>
<h3 id="1-2-请求方法"><a href="#1-2-请求方法" class="headerlink" title="1.2 请求方法"></a>1.2 请求方法</h3><p>接口请求方法均为POST</p>
<p><a href="https://www.runoob.com/http/http-methods.html" target="_blank" rel="noopener">请求方法说明</a></p>
<h3 id="1-3-请求头"><a href="#1-3-请求头" class="headerlink" title="1.3 请求头"></a>1.3 请求头</h3><p>设置请求内容的类型为json，即设置Content-type为application/json</p>
<p><a href="https://www.runoob.com/http/http-content-type.html" target="_blank" rel="noopener">content-type说明</a></p>
<h3 id="1-4-请求内容"><a href="#1-4-请求内容" class="headerlink" title="1.4 请求内容"></a>1.4 请求内容</h3><p>没有过滤项：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"data"</span>: <span class="built_in">JSON</span>.stringify(&#123;<span class="string">"Name"</span>: reportId,<span class="string">"Items"</span>:[]&#125;)</span><br></pre></td></tr></table></figure>

<p>有过滤项：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"data"</span>: <span class="built_in">JSON</span>.stringify(&#123;<span class="string">"Name"</span>: reportId,<span class="string">"Items"</span>:[&#123;<span class="string">"Key"</span>:<span class="string">"请选择区域"</span>,<span class="string">"Name"</span>:<span class="string">"请选择区域"</span>,<span class="string">"Value1"</span>:<span class="string">"-全部-"</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="2、数据源准备"><a href="#2、数据源准备" class="headerlink" title="2、数据源准备"></a>2、数据源准备</h2><p>数据源准备就是通过分析云设计报表，生成报表id及块id，从而可以通过调用接口方式获取数据。按照需求划分一般可以分为两种类型，一种为分析云原有报表模板，但是需要进行样式上的微调，另一种是纯定制化开发。</p>
<h3 id="2-1-样式微调"><a href="#2-1-样式微调" class="headerlink" title="2.1 样式微调"></a>2.1 样式微调</h3><p>建议选用对应的报表模板进行设计</p>
<p>例如需要开发一个柱状图，需要改变柱体样式并增加颜色渐变。由于是标准的报表开发，即接接口返回的数据更适配柱状图，可直接使用，减少数据处理步骤，缩短开发时间。</p>
<h3 id="2-2-定制开发"><a href="#2-2-定制开发" class="headerlink" title="2.2 定制开发"></a>2.2 定制开发</h3><p>建议统一使用垂直表模板进行设计</p>
<h2 id="3、接口测试"><a href="#3、接口测试" class="headerlink" title="3、接口测试"></a>3、接口测试</h2><p>使用接口测试工具Postman</p>
<p><a href="https://www.getpostman.com/" target="_blank" rel="noopener">安装包</a>   |   <a href="https://blog.csdn.net/fxbin123/article/details/80428216" target="_blank" rel="noopener">使用教程</a></p>
<h3 id="3-1-获取请求地址即参数"><a href="#3-1-获取请求地址即参数" class="headerlink" title="3.1 获取请求地址即参数"></a>3.1 获取请求地址即参数</h3><p>除参照1.1的方式外，还可使用下述方法</p>
<p>设计报表，预览报表，检查元素(F12)，刷新页面(F5)</p>
<p><img src="E:%5Cmd%E6%96%87%E6%A1%A3%5C%E5%88%86%E6%9E%90%E4%BA%91%E4%BA%8C%E5%BC%80%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%AF%87%5C%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82.png" alt=""></p>
<p>依次点击，网络-&gt;内容类型-&gt;XHR-&gt;”?reportId”开头的请求</p>
<p>标头中的请求url即完整的请求地址，可直接复制到Postman</p>
<p>正文中的请求正文即请求内容data，可直接复制到Postman</p>
<h3 id="3-2-Postman调用"><a href="#3-2-Postman调用" class="headerlink" title="3.2 Postman调用"></a>3.2 Postman调用</h3><p>新建请求窗口，复制请求地址，修改请求方法为POST，增加Headers，复制请求，添加请求正文，Send</p>
<p><img src="C:%5CUsers%5CZ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200109155347891.png" alt="image-20200109155347891"></p>
<p><img src="C:%5CUsers%5CZ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200109160654620.png" alt="image-20200109160654620"></p>
<h2 id="4、开发示例"><a href="#4、开发示例" class="headerlink" title="4、开发示例"></a>4、开发示例</h2><p>使用开发工具HbuildX</p>
<p><a href="https://www.dcloud.io/hbuilderx.html" target="_blank" rel="noopener">安装包</a>    |    <a href="https://ask.dcloud.net.cn/docs/#//ask.dcloud.net.cn/article/35357" target="_blank" rel="noopener">使用教程</a></p>
<h3 id="4-1新建Html项目"><a href="#4-1新建Html项目" class="headerlink" title="4.1新建Html项目"></a>4.1新建Html项目</h3><p><img src="C:%5CUsers%5CZ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200109161448337.png" alt="image-20200109161448337"></p>
<p>项目目录</p>
<p><img src="C:%5CUsers%5CZ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200109161826526.png" alt="image-20200109161826526"></p>
<h3 id="4-2-引入jquery-js"><a href="#4-2-引入jquery-js" class="headerlink" title="4.2 引入jquery.js"></a>4.2 引入jquery.js</h3><p>在js下新建lib目录，在lib目录下新建js文件，选择jquery</p>
<p><img src="C:%5CUsers%5CZ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200109162058744.png" alt="image-20200109162058744"></p>
<h3 id="4-3-自定义调用接口js"><a href="#4-3-自定义调用接口js" class="headerlink" title="4.3 自定义调用接口js"></a>4.3 自定义调用接口js</h3><p>在js下新建views目录，在views目录下新建js文件”index.js”，选择default</p>
<p>使用Postman生成jQuery请求代码，将生成代码贴入新创建的index.js中</p>
<p><img src="C:%5CUsers%5CZ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200109162336540.png" alt="image-20200109162336540"></p>
<h3 id="4-4-修改index-html"><a href="#4-4-修改index-html" class="headerlink" title="4.4 修改index.html"></a>4.4 修改index.html</h3><p>引入jquery和自定义js</p>
<p><img src="C:%5CUsers%5CZ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200109162733035.png" alt="image-20200109162733035"></p>
<h3 id="4-5-运行查看结果"><a href="#4-5-运行查看结果" class="headerlink" title="4.5 运行查看结果"></a>4.5 运行查看结果</h3><p><img src="C:%5CUsers%5CZ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200109162850269.png" alt="image-20200109162850269"></p>
<p>运行到内置浏览器（需要事先现安装内置浏览器插件）</p>
<p>右键-&gt;检查元素-&gt;Console，查看结果</p>
]]></content>
      <categories>
        <category>二开</category>
      </categories>
      <tags>
        <tag>分析云</tag>
      </tags>
  </entry>
  <entry>
    <title>基于kettle实现多个Excel匹配合并</title>
    <url>/2020/01/09/%E5%9F%BA%E4%BA%8Ekellte%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AAExcel%E5%8C%B9%E9%85%8D%E5%90%88%E5%B9%B6/</url>
    <content><![CDATA[<h2 id="基于kettle实现多个Excel匹配合并"><a href="#基于kettle实现多个Excel匹配合并" class="headerlink" title="基于kettle实现多个Excel匹配合并"></a>基于kettle实现多个Excel匹配合并</h2><hr>
<h3 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h3><ul>
<li>Excel输入</li>
<li>排序记录</li>
<li>记录集连接</li>
<li>Excel输出 </li>
</ul>
<hr>
<h3 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h3><h4 id="1、Excel输入"><a href="#1、Excel输入" class="headerlink" title="1、Excel输入"></a>1、Excel输入</h4><p>从Excel文件导入数据，即数据源为Excel文件数据</p>
<p><img src="C:%5CUsers%5CZ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200103164737770.png" alt="image-20200103164737770"></p>
<p>1.1、修改【步骤名称】，自定义</p>
<p>1.2、选择【表格类型】</p>
<ul>
<li>Excel 97-2003 XLS (JXL)   支持“.xls”格式，office97-2003</li>
<li>Excel 2007 XLSX (Apache POI)   支持“.xlsx”格式，office2007以上</li>
<li>Excel 2007 XLSX (Apache POI Streaming)   支持“.xlsx”格式，office2007以上</li>
<li>Open Office ODS (ODFDOM)   支持“.ods”，电子表格</li>
</ul>
<p>1.3、选择【文件或目录】</p>
<p>通过浏览，选择数据源所在目录或文件，点击增加，将目标文件选中至选中的文件列表</p>
<p>1.4、点击【工作表】进行工作表的选择</p>
<p><img src="C:%5CUsers%5CZ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200103170222127.png" alt="image-20200103170222127"></p>
<p>1.5、点击【获取工作表名称】，弹出的对话框中选择目标sheet</p>
<p>1.6、点击【字段】，进行数据源字段的选择及设置</p>
<p><img src="C:%5CUsers%5CZ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200103170415211.png" alt="image-20200103170415211"></p>
<p>1.7、点击【获取来自头部数据的字段】</p>
<p>根据实际情况修改字段名称、数据类型，或进行一些数据的预处理，去除空格、去除重复，设置源数据的格式，例如“0.00  保留两位小数”“yyyy/MM/dd 年/月/日”</p>
<p>1.8、点击【预览记录】，查看是否可以正常获取数据源</p>
<h4 id="2、排序记录"><a href="#2、排序记录" class="headerlink" title="2、排序记录"></a>2、排序记录</h4><p>对数据源进行排序设置</p>
<p><img src="C:%5CUsers%5CZ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200103171929374.png" alt="image-20200103171929374"></p>
<p>2.1、修改【步骤名称】，自定义</p>
<p>2.2、点击【获取字段】，删除多余字段，只保留需要排序字段</p>
<blockquote>
<p>注意：所有后续步骤在设置前都需要设置节点连接，按住shift，同时鼠标单击，自一个步骤拖至另一个步骤</p>
</blockquote>
<h4 id="3、记录集连接"><a href="#3、记录集连接" class="headerlink" title="3、记录集连接"></a>3、记录集连接</h4><p>配置两个数据源的的关联关系及关联字段</p>
<p><img src="C:%5CUsers%5CZ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200103172911231.png" alt="image-20200103172911231"></p>
<p>3.1、修改【步骤名称】，自定义</p>
<p>3.2、设置两个数据源【第一步骤】【第二步骤】</p>
<p>3.3、选择【连接类型】</p>
<ul>
<li>INNER    内关联</li>
<li>LEFT OUTER     左关联</li>
<li>RIGHT OUTER  右关联</li>
<li>FULL OUTER    全关联</li>
</ul>
<p>3.4、点击【获取连接字段】，分别选取两个数据源的关联字段</p>
<h4 id="4、Excel输出"><a href="#4、Excel输出" class="headerlink" title="4、Excel输出"></a>4、Excel输出</h4><p><img src="C:%5CUsers%5CZ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200103173723636.png" alt="image-20200103173723636"></p>
<p>4.1、修改【步骤名称】，自定义</p>
<p>4.2、设置存储位置及文件名</p>
<p><img src="C:%5CUsers%5CZ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200103173823290.png" alt="image-20200103173823290"></p>
<p>4.3、设置sheet</p>
<p><img src="C:%5CUsers%5CZ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200103173847746.png" alt="image-20200103173847746"></p>
<p>4.3、设置输出字体格式</p>
<p><img src="C:%5CUsers%5CZ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200103173915256.png" alt="image-20200103173915256"></p>
<p>4.4、设置输出字段及类型</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>未完待续！~</p>
]]></content>
      <categories>
        <category>kettl</category>
      </categories>
      <tags>
        <tag>kettl</tag>
        <tag>ETL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>统一返回结果及异常处理</title>
    <url>/2019/12/29/%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E5%8F%8A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>制定统一的返回结果标准<br>制定系统内置异常代码描述，统一格式，方便维护及使用<br>制定统一的返回结果处理方法，对请求成功或有异常等结果进行封装<br>自定义异常处理方法，依照无参、指定异常代码（使用内置异常代码）、指定异常信息（默认代码500，抛出具体异常信息）、通用方法<br>通过@ControllerAdvice进行全局异常处理，识别不同异常类型进行分别处理</p>
<h2 id="统一返回结果"><a href="#统一返回结果" class="headerlink" title="统一返回结果"></a>统一返回结果</h2><p>声明一个统一的返回结果对象<br>BaseResult.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import com.fasterxml.jackson.databind.annotation.JsonSerialize;</span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">&#x2F;&#x2F;不显示null字段</span><br><span class="line">@JsonSerialize(include &#x3D; JsonSerialize.Inclusion.NON_NULL)</span><br><span class="line">public class BaseResult&lt;T&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; 返回代码</span><br><span class="line">    private String code;</span><br><span class="line">    &#x2F;&#x2F; 返回状态</span><br><span class="line">    private Integer status;</span><br><span class="line">    &#x2F;&#x2F; 返回信息</span><br><span class="line">    private String msg;</span><br><span class="line">    &#x2F;&#x2F; 返回数据</span><br><span class="line">    private T data;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义代码枚举类,包含请求成功及异常代码<br>CodeEnum.java   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public enum CodeEnum &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;* 请求成功 *&#x2F;</span><br><span class="line">    SUCCESS(&quot;0&quot;, &quot;请求成功&quot;),</span><br><span class="line"></span><br><span class="line">    &#x2F;* 未指明异常 *&#x2F;</span><br><span class="line">    UNSPECIFIED(&quot;500&quot;, &quot;网络异常，请稍后再试&quot;),</span><br><span class="line">    NO_SERVICE(&quot;404&quot;, &quot;网络异常, 服务器熔断&quot;),</span><br><span class="line"></span><br><span class="line">    &#x2F;*  通用异常 *&#x2F;</span><br><span class="line">    REQUEST_ERROR(&quot;400&quot;, &quot;入参异常,请检查入参后再次调用&quot;),</span><br><span class="line">    PAGE_NUM_IS_NULL(&quot;4001&quot;,&quot;页码不能为空&quot;),</span><br><span class="line">    PAGE_SIZE_IS_NULL(&quot;4002&quot;,&quot;页数不能为空&quot;),</span><br><span class="line">    ID_IS_NULL(&quot;4003&quot;,&quot;ID不能为空&quot;),</span><br><span class="line">    SEARCH_IS_NULL(&quot;4004&quot;,&quot;搜索条件不能为空&quot;)</span><br><span class="line"></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 错误码</span><br><span class="line">    private  String code;</span><br><span class="line">    &#x2F;&#x2F; 错误描述</span><br><span class="line">    private  String msg;</span><br><span class="line"></span><br><span class="line">    CodeEnum (String code, String msg) &#123;</span><br><span class="line">        this.code &#x3D; code;</span><br><span class="line">        this.msg &#x3D; msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCode(String code) &#123;</span><br><span class="line">        this.code &#x3D; code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMsg() &#123;</span><br><span class="line">        return msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMsg(String msg) &#123;</span><br><span class="line">        this.msg &#x3D; msg;</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>创建统一返回结果的处理方法，包含</p>
<ul>
<li>请求成功，有返回结果</li>
<li>请求失败，有异常</li>
</ul>
<p>ResultUitl.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ResultUtil &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">    * @Description: 请求成功，且有返回数据</span><br><span class="line">    *&#x2F;</span><br><span class="line">    public static &lt;T&gt; BaseResult&lt;T&gt; success(T data) &#123;</span><br><span class="line">        return commonResult(CodeEnum.SUCCESS.getCode(), 1, CodeEnum.SUCCESS.getMsg(), data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">    * @Description: 请求失败，有异常</span><br><span class="line">    *&#x2F;</span><br><span class="line">    public static &lt;T&gt; BaseResult&lt;T&gt; error(String code, String msg) &#123;</span><br><span class="line">        return commonResult(code, 0, msg, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">    * @Description: 构造统一返回结果</span><br><span class="line">    *&#x2F;</span><br><span class="line">    private static &lt;T&gt; BaseResult&lt;T&gt; commonResult(String code, Integer status, String msg, T data) &#123;</span><br><span class="line">        BaseResult&lt;T&gt; result &#x3D; new BaseResult&lt;&gt;();</span><br><span class="line">        result.setCode(code);</span><br><span class="line">        result.setStatus(status);</span><br><span class="line">        result.setMsg(msg);</span><br><span class="line">        result.setData(data);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>常见异常</p>
<ul>
<li><a href="http://note.youdao.com/noteshare?id=4c0ba0a31e2290c65e89a598383cea51&sub=2815B30B528947A999141ACB8D0ACF02" target="_blank" rel="noopener">HTTP请求异常</a></li>
</ul>
<p>创建基础异常处理类<br>BaseException.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import com.hx.tyc.config.result.CodeEnum;</span><br><span class="line">import lombok.Data;</span><br><span class="line">@Data</span><br><span class="line">public class BaseException extends RuntimeException &#123;</span><br><span class="line"></span><br><span class="line">    private CodeEnum errorcCodes;</span><br><span class="line">    &#x2F;** </span><br><span class="line">    * @Description: 构造无参异常处理类</span><br><span class="line">    *&#x2F; </span><br><span class="line">    public BaseException() &#123;</span><br><span class="line">        super(CodeEnum.UNSPECIFIED.getMsg());</span><br><span class="line">        this.errorcCodes &#x3D; CodeEnum.UNSPECIFIED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;** </span><br><span class="line">    * @Description: 构造指定异常代码处理方法</span><br><span class="line">    *&#x2F; </span><br><span class="line">    public BaseException(CodeEnum code) &#123;</span><br><span class="line">        super(code.getMsg());</span><br><span class="line">        this.errorcCodes &#x3D; code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;** </span><br><span class="line">    * @Description: 构造指定异常信息处理方法 </span><br><span class="line">    *&#x2F; </span><br><span class="line">    public BaseException(String errorMsg) &#123;</span><br><span class="line">        super(errorMsg);</span><br><span class="line">        this.errorcCodes &#x3D; CodeEnum.UNSPECIFIED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;** </span><br><span class="line">    * @Description: 构造通用异常处理方法 </span><br><span class="line">    *&#x2F; </span><br><span class="line">    public BaseException(CodeEnum errorCode, String errorMsg) &#123;</span><br><span class="line">        super(errorMsg);</span><br><span class="line">        this.errorcCodes &#x3D; errorCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建全局异常处理类，识别返回异常类型，按照统一返回结果格式进行数据展示<br>GlobalExceptionHandle.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import com.hx.tyc.config.result.BaseResult;</span><br><span class="line">import com.hx.tyc.config.result.ResultUtil;</span><br><span class="line">import org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line">import org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">@ControllerAdvice</span><br><span class="line">public class GlobalExceptionHandle &#123;</span><br><span class="line"></span><br><span class="line">    @ExceptionHandler(value &#x3D; Exception.class)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public &lt;T&gt; BaseResult&lt;T&gt; ExceptionHandle(Exception ex) &#123;</span><br><span class="line">        String code &#x3D; null;</span><br><span class="line">        String msg &#x3D; null;</span><br><span class="line">        if (ex instanceof BaseException) &#123;</span><br><span class="line">            BaseException baseException &#x3D; (BaseException) ex;</span><br><span class="line">            code &#x3D; baseException.getErrorcCodes().getCode();</span><br><span class="line">            msg &#x3D; baseException.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        return ResultUtil.error(code, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="应用示例"><a href="#应用示例" class="headerlink" title="应用示例"></a>应用示例</h2><p>调用请求成功方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public BaseResult&lt;HxTycCompanyInfo&gt; save(String code) &#123;</span><br><span class="line">        return ResultUtil.success(companyInfoApiService.save(code));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>调用异常方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">throw new BaseException(CodeEnum.UNSPECIFIED);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Exception</tag>
        <tag>Restful</tag>
      </tags>
  </entry>
</search>
